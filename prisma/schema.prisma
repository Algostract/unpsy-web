// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ScaleName {
  MACI
  MCMI
  MMPI_RF
  TCI
  MPQ
  EPQ
  EPQ_R
  JTCI
  SCL_90R
  // JEPQ
  DSMD_C
  DSMD_A
}

enum ScaleType {
  Binary
  Pentanary
}

model Option {
  name  String
  value Int
  scale ScaleName

  @@unique([name, scale])
}

enum Gender {
  Male
  Female
  Other
}

enum PaymentInstrument {
  UPI
  NetBanking
  Card
}

model Preference {
  isModeLight Boolean
  payment     PaymentInstrument

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String?        @unique
  phone         String?        @unique
  dob           DateTime?
  gender        Gender?
  reports       Report[]
  subscriptions Subscription[]
  purchases     Purchase[]
  feedbacks     Feedback[]
  preference    Preference?
}

enum Plan {
  Free
  Basic
  Pro
}

model Subscription {
  id        String   @id @default(uuid())
  name      Plan
  expiresAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum PurchaseStatus {
  Pending
  Success
  Failed
}

model Purchase {
  id          String          @id @default(uuid())
  scales      PurchaseScale[]
  purchasedAt DateTime        @default(now())
  status      PurchaseStatus  @default(Pending)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([id, userId])
}

model PurchaseScale {
  name         ScaleName
  monthlyPrice Int
  duration     Int
  purchase     Purchase  @relation(fields: [purchaseId], references: [id])
  purchaseId   String

  @@unique([name, purchaseId])
}

model Patient {
  id   String @id @default(uuid())
  name String

  reports Report[]
}

enum ReportStatus {
  Draft
  Complete
}

model Report {
  id     String       @id @default(uuid())
  scale  ScaleName
  status ReportStatus
  data   Json
  value  Json

  user       User      @relation(fields: [userId], references: [id])
  userId     String
  patient    Patient?  @relation(fields: [patientId], references: [id])
  patientId  String?
  createdAt  DateTime? @default(now())
  modifiedAt DateTime? @default(now())
}

enum FeedbackType {
  Compilant
  Feedback
}

model Feedback {
  id      String       @id @default(uuid())
  type    FeedbackType
  comment String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}
